<?php
/**
 * ライブラリファイル
 * 
 * SocketManagerクラス初期化用インタフェースのファイル
 */

 namespace SocketManager\Library;


/**
 * SocketManagerクラス初期化用インタフェース
 * 
 * SocketManagerクラス初期化時にインプリメントしてsetInitSocketManagerメソッドへ渡すための定義
 * 
 * ※グローバル関数名指定も可
 */
interface IInitSocketManager
{
    /**
     * ログライターの取得
     * 
     * nullを返した場合は無効化される（但し、ライブラリ内部で出力されているエラーメッセージも出力されない）
     * 
     * @return mixed "function(string $p_level, array $p_param): void" or null（ログ出力なし）
     * 
     *----------------------------------------------------------------------------------------------------
     * 【ログライター関数仕様】
     * 
     * 引数1：string $p_level ログレベル（※1）
     * 
     * 引数2：array $p_param ログパラメータ
     * 
     * 戻り値：なし
     * 
     * （※1）当該ライブラリで使用しているレベル種別⇒"debug" or "info" or "notice" or "warning" or "error"
     * 
     *----------------------------------------------------------------------------------------------------
     */
    public function getLogWriter();

    /**
     * シリアライザーの取得
     * 
     * nullを返した場合は無効化される。
     * エラー発生時はUnitExceptionクラスで例外をスローして切断する。
     * 
     * @return mixed "function(mixed $p_data): mixed" or null（シリアライズなし）
     * 
     *----------------------------------------------------------------------------------------------------
     * 【シリアライザー関数仕様（※1）】
     * 
     * 引数1：mixed $p_data シリアライズ対象ペイロードデータ
     * 
     * 戻り値：mixed シリアライズデータ
     * 
     * （※1）送受信データスタック内のデータが対象
     * 
     *----------------------------------------------------------------------------------------------------
     */
    public function getSerializer();

    /**
     * アンシリアライザーの取得
     * 
     * nullを返した場合は無効化される。
     * エラー発生時はUnitExceptionクラスで例外をスローして切断する。
     * 
     * @return mixed "function(mixed $p_data): mixed" or null（アンシリアライズなし）
     * 
     *----------------------------------------------------------------------------------------------------
     * 【アンシリアライザー関数仕様（※1）】
     * 
     * 引数1：mixed $p_data アンシリアライズ対象ペイロードデータ
     * 
     * 戻り値：mixed アンシリアライズデータ
     * 
     * （※1）送受信データスタック内のデータが対象
     * 
     *----------------------------------------------------------------------------------------------------
     */
    public function getUnserializer();

    /**
     * コマンドディスパッチャーの取得
     * 
     * 受信データからコマンドを解析して返す
     * 
     * コマンドUNIT実行中に受信データが溜まっていた場合でもコマンドUNITの処理が完了するまで
     * 待ってから起動されるため処理競合の調停役を兼ねる。
     * 
     * nullを返した場合は無効化される。エラー発生時はUnitExceptionクラスで例外をスローして切断する。
     * 
     * @return mixed "function(SocketManagerParameter $p_param, mixed $p_dat): ?string" or null（ディスパッチ機能なし）
     * 
     *----------------------------------------------------------------------------------------------------
     * 【コマンドディスパッチャー関数仕様】
     * 
     * 引数1：SocketManagerParameter（※1） $p_param UNITパラメータ
     * 
     * 引数2：mixed $p_dat 受信データ（ペイロード部）
     * 
     * 戻り値：?string コマンドUNITのキュー名 or null（変更なし）
     * 
     * （※1）当該クラス、あるいは当該クラスを継承したクラスも指定可
     * 
     *----------------------------------------------------------------------------------------------------
     */
    public function getCommandDispatcher();

    /**
     * 緊急停止時のコールバックの取得
     * 
     * UNIT処理以外で緊急切断が発生した場合に実行される。
     * 
     * 発生要因⇒相手先による切断・コマンドディスパッチャーでの例外発生・アライブチェックタイムアウト
     * 
     * ※nullを返した場合は無効化される。
     * 
     * @return mixed "function(SocketManagerParameter $p_param)" or null（緊急停止時処理なし）
     * 
     *----------------------------------------------------------------------------------------------------
     * 【緊急停止時のコールバック関数仕様】
     * 
     * 引数1：SocketManagerParameter（※1） $p_param UNITパラメータ
     * 
     * 戻り値：なし
     * 
     * （※1）当該クラス、あるいは当該クラスを継承したクラスも指定可
     * 
     *----------------------------------------------------------------------------------------------------
     */
    public function getEmergencyCallback();

    /**
     * UNITパラメータインスタンスの取得
     * 
     * nullを返した場合はSocketManagerParameterのインスタンスが適用される
     * 
     * @return ?SocketManagerParameter
     * ― SocketManagerParameterクラスのインスタンス
     * 
     * ― 当該クラス、あるいは当該クラスを継承したクラスも指定可
     */
    public function getUnitParameter(): ?SocketManagerParameter;

}
